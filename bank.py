import hashlib
import json
import random
from base64 import b64encode, b64decode
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import tkinter as tk
from tkinter import ttk

names = [
    "Nguy·ªÖn VƒÉn An", "Nguy·ªÖn Th·ªã H·∫°nh", "Tr·∫ßn VƒÉn B√¨nh", "Tr·∫ßn Th·ªã Thu",
    "L√™ VƒÉn C∆∞·ªùng", "L√™ Th·ªã Mai", "Ph·∫°m VƒÉn D≈©ng", "Ph·∫°m Th·ªã Lan",
    "Ho√†ng VƒÉn Minh", "Ho√†ng Th·ªã Ng·ªçc", "ƒê·ªó VƒÉn Nam", "ƒê·ªó Th·ªã Hoa",
    "B√πi VƒÉn Quang", "B√πi Th·ªã H∆∞∆°ng", "V≈© VƒÉn S∆°n", "V≈© Th·ªã Y·∫øn",
    "ƒê·∫∑ng VƒÉn Th√°i", "ƒê·∫∑ng Th·ªã H·∫±ng", "Ng√¥ VƒÉn Huy", "Ng√¥ Th·ªã Kim"
]

def generate_transaction(valid=True, level=1):
    nguoi_gui = random.choice(names)
    nguoi_nhan = random.choice([n for n in names if n != nguoi_gui])
    so_tien = round(random.uniform(100_000, 5_000_000), -3) if level == 1 else (
             round(random.uniform(5_000_000, 100_000_000), -3) if level == 2 else
             round(random.uniform(100_000_000, 500_000_000), -3))

    tx = {
        'nguoi_gui': nguoi_gui,
        'nguoi_nhan': nguoi_nhan,
        'tai_khoan_gui': str(random.randint(1000000000, 9999999999)),
        'tai_khoan_nhan': str(random.randint(1000000000, 9999999999)),
        'so_tien': so_tien
    }

    if not valid:
        error_type = random.choice([
            "missing_tai_khoan_nhan", "missing_nguoi_gui", "negative_so_tien",
            "same_accounts", "missing_so_tien", "invalid_account_format",
            "missing_nguoi_nhan", "excessive_so_tien", "malicious_name",
            "malicious_account", "strange_field"
        ])
        if error_type == "missing_tai_khoan_nhan": del tx['tai_khoan_nhan']
        elif error_type == "missing_nguoi_gui": del tx['nguoi_gui']
        elif error_type == "negative_so_tien": tx['so_tien'] = -random.uniform(100_000, 500_000_000)
        elif error_type == "same_accounts": tx['tai_khoan_nhan'] = tx['tai_khoan_gui']
        elif error_type == "missing_so_tien": del tx['so_tien']
        elif error_type == "invalid_account_format": tx['tai_khoan_nhan'] = str(random.randint(1000, 99999))
        elif error_type == "missing_nguoi_nhan": del tx['nguoi_nhan']
        elif error_type == "excessive_so_tien": tx['so_tien'] = random.uniform(1_000_000_000, 5_000_000_000)
        elif error_type == "malicious_name": tx['nguoi_gui'] = "<script>alert('XSS')</script>"
        elif error_type == "malicious_account": tx['tai_khoan_nhan'] = "' OR '1'='1"
        elif error_type == "strange_field": tx['truong_la'] = "Tr∆∞·ªùng d·ªØ li·ªáu b·∫•t th∆∞·ªùng"

    return tx

class EncryptionGameApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("H·ªá th·ªëng m√£ h√≥a ng√¢n h√†ng")
        self.geometry("950x800")
        self.configure(bg='#f0f4f7')

        self.level = tk.StringVar(value="1 - D·ªÖ")
        self.feedback_text = tk.StringVar()
        self.score = 0
        self.score_text = tk.StringVar(value="ƒêi·ªÉm: 0")

        self.transactions = []
        self.current_tx = None
        self.encrypted = None
        self.signature = None
        self.status = {'encrypted': False, 'signed': False, 'checked': False}

        self.setup_ui()
        self.update_transactions()

        self.history = []

    def setup_ui(self):
        tk.Label(self, text="üîê H·ªá th·ªëng m√£ h√≥a ng√¢n h√†ng", font=("Helvetica", 18, "bold"), bg='#f0f4f7').pack(pady=15)

        top_frame = tk.Frame(self, bg='#f0f4f7')
        top_frame.pack(pady=10)

        ttk.Label(top_frame, text="Ch·ªçn c·∫•p ƒë·ªô:").grid(row=0, column=0, padx=5)
        level_menu = ttk.Combobox(top_frame, textvariable=self.level, values=["1 - D·ªÖ", "2 - Trung b√¨nh", "3 - Kh√≥"], state='readonly', width=15)
        level_menu.grid(row=0, column=1, padx=5)
        level_menu.current(0)
        level_menu.bind("<<ComboboxSelected>>", lambda e: self.update_transactions())

        ttk.Label(top_frame, text="Ch·ªçn giao d·ªãch:").grid(row=0, column=2, padx=5)
        self.transaction_menu = ttk.Combobox(top_frame, state='readonly', width=60)
        self.transaction_menu.grid(row=0, column=3, padx=5)
        self.transaction_menu.bind("<<ComboboxSelected>>", lambda e: self.select_transaction())

        tk.Label(self, textvariable=self.score_text, font=("Helvetica", 13, "bold"), fg='green', bg='#f0f4f7').pack(pady=5)

        frame_info = tk.LabelFrame(self, text="üìë Th√¥ng tin giao d·ªãch", bg='white', padx=10, pady=10)
        frame_info.pack(padx=20, pady=10, fill='x')
        self.info_text = tk.Label(frame_info, text="Ch∆∞a c√≥ giao d·ªãch", font=("Helvetica", 13), bg='white', anchor='w', justify='left')
        self.info_text.pack(fill='x', padx=5, pady=5)

        frame_buttons = tk.Frame(self, bg='#f0f4f7')
        frame_buttons.pack(pady=10)
        tk.Button(frame_buttons, text="üîê M√£ h√≥a giao d·ªãch", bg='#2196F3', fg='white', command=self.encrypt_transaction).grid(row=0, column=0, padx=5)
        tk.Button(frame_buttons, text="üñä X√°c th·ª±c giao d·ªãch", bg='#FF9800', fg='white', command=self.sign_transaction).grid(row=0, column=1, padx=5)
        tk.Button(frame_buttons, text="üîç Ki·ªÉm tra t√≠nh to√†n v·∫πn", bg='#9C27B0', fg='white', command=self.check_transaction).grid(row=0, column=2, padx=5)
        tk.Button(frame_buttons, text="üìú Xem l·ªãch s·ª≠ giao d·ªãch", bg='#607D8B', fg='white', command=self.show_history).grid(row=0, column=3, padx=5)

        frame_result = tk.LabelFrame(self, text="üìã K·∫øt qu·∫£ x·ª≠ l√Ω", bg='white', padx=10, pady=10)
        frame_result.pack(padx=20, pady=10, fill='both', expand=True)
        self.output = tk.Text(frame_result, height=15, font=("Consolas", 11), bg='#eef5f9', wrap='word')
        self.output.pack(fill='both', expand=True)

        self.output.tag_config('blue', foreground='#0066CC')    # Xanh d∆∞∆°ng ƒë·∫≠m
        self.output.tag_config('orange', foreground="#FF6600")  # Cam ƒë·∫≠m d·ªÖ nh√¨n
        self.output.tag_config('red', foreground='#CC0000')     # ƒê·ªè ƒë·∫≠m
        self.output.tag_config('green', foreground='#008000')   # Xanh l√° ƒë·∫≠m
        self.output.tag_config('yellow', foreground='#999900')  # V√†ng ƒë·∫≠m

        self.feedback_label = tk.Label(self, textvariable=self.feedback_text, font=("Helvetica", 13), bg='#f0f4f7', fg='blue', justify='left')
        self.feedback_label.pack(pady=10)

    def set_feedback(self, message, color="blue"):
        self.feedback_label.config(fg=color)
        self.feedback_text.set(message)

    def print_output(self, message, color=None):
        start_idx = self.output.index(tk.END)
        self.output.insert(tk.END, message + "\n")
        
        # To√†n b·ªô m·∫∑c ƒë·ªãnh ch·ªØ ƒëen
        self.output.tag_add('black', start_idx, self.output.index(tk.END))

        # N·∫øu c√≥ y√™u c·∫ßu m√†u nh·∫•n m·∫°nh, ch·ªâ b√¥i m√†u cho d√≤ng v·ª´a ch√®n
        if color:
            self.output.tag_add(color, start_idx, self.output.index(tk.END))

        self.output.see(tk.END)
        self.output.tag_config('black', foreground='black')

    def get_level_number(self):
        return int(self.level.get().split(" ")[0])

    def update_transactions(self):
        self.rsa_key = RSA.generate(1024 if self.get_level_number() == 1 else 2048 if self.get_level_number() == 2 else 3072)
        self.pub_key = self.rsa_key.publickey()
        self.aes_key = get_random_bytes(16)
        self.iv = get_random_bytes(16) if self.get_level_number() == 3 else b'abcdefghijklmnop'

        self.transactions.clear()
        lv = self.get_level_number()
        num_total = 3 if lv == 1 else 5 if lv == 2 else 7
        error_count = 1 if lv == 1 else 2 if lv == 2 else 3

        for _ in range(num_total - error_count):
            self.transactions.append(generate_transaction(valid=True, level=lv))
        for _ in range(error_count):
            self.transactions.append(generate_transaction(valid=False, level=lv))

        random.shuffle(self.transactions)
        options = []
        for i, tx in enumerate(self.transactions):
            nguoi_gui = tx.get('nguoi_gui', 'Kh√¥ng r√µ')
            nguoi_nhan = tx.get('nguoi_nhan', 'Kh√¥ng r√µ')
            so_tien = tx.get('so_tien', '-')
            so_tien_text = f"{so_tien:,.0f}‚Ç´" if isinstance(so_tien, (int, float)) else "Kh√¥ng h·ª£p l·ªá"
            label = f"Giao d·ªãch {i+1}: {nguoi_gui} ‚Üí {nguoi_nhan} ({so_tien_text})"
            options.append(label)

        self.transaction_menu.config(values=options)

        self.transaction_menu.current(0)
        self.select_transaction()

    def select_transaction(self):
        idx = self.transaction_menu.current()
        self.current_tx = self.transactions[idx]
        self.encrypted = None
        self.signature = None
        self.status = {'encrypted': False, 'signed': False, 'checked': False}

        so_tien = self.current_tx.get('so_tien', '-')
        so_tien_text = f"{so_tien:,.0f}‚Ç´" if isinstance(so_tien, (int, float)) else "Kh√¥ng h·ª£p l·ªá"
        info = (
            f"üë§ Ng∆∞·ªùi g·ª≠i: {self.current_tx.get('nguoi_gui', '-')}\n\n"
            f"üë§ Ng∆∞·ªùi nh·∫≠n: {self.current_tx.get('nguoi_nhan', '-')}\n\n"
            f"üè¶ T√†i kho·∫£n g·ª≠i: {self.current_tx.get('tai_khoan_gui', '-')}\n\n"
            f"üè¶ T√†i kho·∫£n nh·∫≠n: {self.current_tx.get('tai_khoan_nhan', '-')}\n\n"
            f"üí∞ S·ªë ti·ªÅn: {so_tien_text}"
        )

        self.info_text.config(text=info)
        self.output.delete(1.0, tk.END)

    def encrypt_transaction(self):
        if self.status['encrypted']:
            self.set_feedback("‚ö† Giao d·ªãch ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫±ng AES.", color='orange')
            return

        json_data = json.dumps(self.current_tx, ensure_ascii=False).encode()
        padded = pad(json_data, AES.block_size)
        cipher = AES.new(self.aes_key, AES.MODE_CBC, iv=self.iv)
        self.encrypted = b64encode(cipher.encrypt(padded)).decode()
        self.status['encrypted'] = True

        self.print_output(f"[AES] D·ªØ li·ªáu ƒë√£ m√£ h√≥a:\n{self.encrypted}\n", 'blue')
        self.print_output(f"[Kh√≥a AES] {self.aes_key.hex()[:16]}...", 'yellow')
        self.set_feedback("‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c m√£ h√≥a th√†nh c√¥ng b·∫±ng AES.", color='green')

    def sign_transaction(self):
        if not self.status['encrypted']:
            self.set_feedback("‚ö† Vui l√≤ng m√£ h√≥a giao d·ªãch b·∫±ng AES tr∆∞·ªõc khi x√°c th·ª±c.", color='orange')
            return
        if self.status['signed']:
            self.set_feedback("‚ö† Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c RSA.", color='orange')
            return

        h = SHA256.new(self.encrypted.encode())
        self.signature = pkcs1_15.new(self.rsa_key).sign(h)
        self.status['signed'] = True

        pubkey_short = self.pub_key.export_key().decode()[:60].replace('\n', '')
        sig_short = self.signature.hex()[:16] + "..."

        self.print_output("[RSA] Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c RSA.", 'orange')
        self.print_output(f"[Kh√≥a RSA c√¥ng khai] {pubkey_short}...", 'yellow')
        self.print_output(f"[Ch·ªØ k√Ω s·ªë] {sig_short}\n", 'yellow')

        self.set_feedback("‚úÖ X√°c th·ª±c RSA th√†nh c√¥ng.", color='green')
        self.hacker_modify_data()

    def hacker_modify_data(self):
        lv = self.get_level_number()
        if lv < 2 or random.random() > 0.3:
            return  # T·ª∑ l·ªá 30% b·ªã hacker can thi·ªáp c·∫•p 2 tr·ªü l√™n

        try:
            decrypted = AES.new(self.aes_key, AES.MODE_CBC, iv=self.iv).decrypt(b64decode(self.encrypted))
            data = json.loads(unpad(decrypted, AES.block_size).decode())

            attack = random.choice(["xss_name", "sql_injection", "so_tien_change"])
            if attack == "xss_name":
                data['nguoi_gui'] = "<script>alert('Hack')</script>"
                self.print_output("üíÄ Hacker ƒë√£ ch√®n m√£ ƒë·ªôc v√†o T√äN NG∆Ø·ªúI G·ª¨I!", 'red')
            elif attack == "sql_injection":
                data['tai_khoan_nhan'] = "' OR '1'='1"
                self.print_output("üíÄ Hacker ƒë√£ t·∫•n c√¥ng SQL Injection v√†o T√ÄI KHO·∫¢N NG∆Ø·ªúI NH·∫¨N!", 'red')
            elif attack == "so_tien_change":
                data['so_tien'] = random.uniform(1_000_000_000, 5_000_000_000)
                self.print_output("üíÄ Hacker ƒë√£ thay ƒë·ªïi S·ªê TI·ªÄN giao d·ªãch!", 'red')

            json_data = json.dumps(data, ensure_ascii=False).encode()
            padded = pad(json_data, AES.block_size)
            cipher = AES.new(self.aes_key, AES.MODE_CBC, iv=self.iv)
            self.encrypted = b64encode(cipher.encrypt(padded)).decode()
        except:
            self.output.insert(tk.END, "‚ö† Hacker t·∫•n c√¥ng th·∫•t b·∫°i.\n")

    def check_transaction(self):
        if not self.status['signed']:
            self.set_feedback("‚ö† Vui l√≤ng x√°c th·ª±c RSA tr∆∞·ªõc khi ki·ªÉm tra t√≠nh to√†n v·∫πn.", color='orange')
            return
        if self.status['checked']:
            self.set_feedback("‚ö† ƒê√£ th·ª±c hi·ªán ki·ªÉm tra t√≠nh to√†n v·∫πn SHA.", color='orange')
            return

        data = self.decrypt_transaction()
        if data is None:
            self.set_feedback("‚ùå Giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã gi·∫£ m·∫°o.", color='red')
            self.increase_score(1)
            self.status['checked'] = True
            return

        valid_signature = self.verify_signature()
        errors = self.validate_transaction_fields(data)

        self.display_transaction_result(data, valid_signature, errors)
        self.status['checked'] = True
        
    def decrypt_transaction(self):
        cipher = AES.new(self.aes_key, AES.MODE_CBC, iv=self.iv)
        try:
            decrypted = cipher.decrypt(b64decode(self.encrypted))
            data = json.loads(unpad(decrypted, AES.block_size).decode())
            return data
        except json.JSONDecodeError:
            self.print_output("‚ùå D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã ph√° h·ªèng!", 'red')
            self.set_feedback("‚ùå Gi·∫£i m√£ JSON th·∫•t b·∫°i, d·ªØ li·ªáu b·ªã ch·ªânh s·ª≠a.", color='red')
        except (ValueError, KeyError) as e:
            self.print_output(f"‚ùå L·ªói gi·∫£i m√£ AES: {str(e)}", 'red')
            self.set_feedback("‚ùå Gi·∫£i m√£ AES th·∫•t b·∫°i, d·ªØ li·ªáu sai ho·∫∑c b·ªã ch·ªânh s·ª≠a.", color='red')
        return None
        
    def verify_signature(self):
        h = SHA256.new(self.encrypted.encode())
        try:
            pkcs1_15.new(self.pub_key).verify(h, self.signature)
            return True
        except (ValueError, TypeError):
            return False
        
    def validate_transaction_fields(self, data):
        errors = []

        required_fields = ['nguoi_gui', 'nguoi_nhan', 'tai_khoan_gui', 'tai_khoan_nhan', 'so_tien']
        for field in required_fields:
            if field not in data:
                if field == 'so_tien':
                    errors.append("‚ö†Ô∏è Giao d·ªãch thi·∫øu th√¥ng tin s·ªë ti·ªÅn.")
                else:
                    errors.append(f"‚ö†Ô∏è Giao d·ªãch thi·∫øu th√¥ng tin '{field}'.")

        if 'so_tien' in data:
            if not isinstance(data['so_tien'], (int, float)) or data['so_tien'] <= 0:
                errors.append("‚ö†Ô∏è S·ªë ti·ªÅn giao d·ªãch kh√¥ng h·ª£p l·ªá.")
            elif data['so_tien'] > 1_000_000_000:
                errors.append("‚ö†Ô∏è S·ªë ti·ªÅn v∆∞·ª£t qu√° gi·ªõi h·∫°n cho ph√©p.")

        if data.get('tai_khoan_nhan') == data.get('tai_khoan_gui'):
            errors.append("‚ö†Ô∏è T√†i kho·∫£n g·ª≠i v√† nh·∫≠n tr√πng nhau.")

        dangerous_fields = ['<script', 'alert', 'onerror', "'", '"', '--', ';']
        for field in ['nguoi_gui', 'nguoi_nhan', 'tai_khoan_gui', 'tai_khoan_nhan']:
            value = data.get(field, '').lower()
            if any(dangerous in value for dangerous in dangerous_fields):
                errors.append("üö® Ph√°t hi·ªán d·ªØ li·ªáu nguy hi·ªÉm (c√≥ th·ªÉ b·ªã t·∫•n c√¥ng XSS ho·∫∑c SQL Injection).")

        original_json = json.dumps(self.current_tx, separators=(',', ':'), ensure_ascii=False)
        decrypted_json = json.dumps(data, separators=(',', ':'), ensure_ascii=False)
        if original_json != decrypted_json:
            errors.append("üö® D·ªØ li·ªáu giao d·ªãch ƒë√£ b·ªã ch·ªânh s·ª≠a ho·∫∑c kh√¥ng kh·ªõp v·ªõi b·∫£n g·ªëc.")

        return errors

    def display_transaction_result(self, data, valid_signature, errors):
        so_tien = data.get('so_tien', '-')
        so_tien_text = f"{so_tien:,.0f}‚Ç´" if isinstance(so_tien, (int, float)) else "Kh√¥ng h·ª£p l·ªá"

        self.print_output("[Gi·∫£i m√£ AES] D·ªØ li·ªáu sau gi·∫£i m√£:", 'blue')
        self.print_output(f"üë§ Ng∆∞·ªùi g·ª≠i: {data.get('nguoi_gui', '-')}")
        self.print_output(f"üë§ Ng∆∞·ªùi nh·∫≠n: {data.get('nguoi_nhan', '-')}")
        self.print_output(f"üè¶ T√†i kho·∫£n g·ª≠i: {data.get('tai_khoan_gui', '-')}")
        self.print_output(f"üè¶ T√†i kho·∫£n nh·∫≠n: {data.get('tai_khoan_nhan', '-')}")
        self.print_output(f"üí∞ S·ªë ti·ªÅn: {so_tien_text}")

        if 'truong_la' in data:
            self.print_output(f"‚ö† Tr∆∞·ªùng d·ªØ li·ªáu b·∫•t th∆∞·ªùng: {data['truong_la']}", 'red')

        if valid_signature and not errors:
            self.print_output("\n‚úÖ T√≠nh to√†n v·∫πn giao d·ªãch ƒë∆∞·ª£c ƒë·∫£m b·∫£o b·∫±ng SHA.", 'green')
            self.set_feedback("‚úÖ Giao d·ªãch h·ª£p l·ªá, d·ªØ li·ªáu an to√†n.", color='green')
            self.increase_score(2)
        else:
            if not valid_signature:
                self.print_output("‚ùå Ch·ªØ k√Ω s·ªë RSA kh√¥ng h·ª£p l·ªá!", 'red')
            if errors:
                self.print_output("‚ö† Ph√°t hi·ªán l·ªói:\n" + "\n".join(f"- {e}" for e in errors), 'red')
            self.set_feedback("‚ùå Giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã gi·∫£ m·∫°o.", color='red')
            self.increase_score(1)

        sha256_hash = hashlib.sha256(json.dumps(data, ensure_ascii=False, separators=(',', ':')).encode()).hexdigest()
        self.print_output(f"[SHA256] Gi√° tr·ªã bƒÉm c·ªßa d·ªØ li·ªáu: {sha256_hash}", 'blue')
        # Cu·ªëi h√†m display_transaction_result
        result_summary = {
            'nguoi_gui': data.get('nguoi_gui', '-'),
            'nguoi_nhan': data.get('nguoi_nhan', '-'),
            'so_tien': so_tien_text,
            'valid_signature': valid_signature,
            'errors': errors
        }
        self.history.append(result_summary)

    def show_history(self):
        history_window = tk.Toplevel(self)
        history_window.title("üìú L·ªãch s·ª≠ giao d·ªãch")
        history_window.geometry("700x500")
        history_window.configure(bg='white')

        frame = tk.Frame(history_window, bg='white')
        frame.pack(fill='both', expand=True, padx=10, pady=10)

        scrollbar = ttk.Scrollbar(frame)
        scrollbar.pack(side='right', fill='y')

        history_text = tk.Text(frame, font=("Helvetica", 12), yscrollcommand=scrollbar.set, wrap='word', state='normal')
        history_text.pack(fill='both', expand=True)
        scrollbar.config(command=history_text.yview)

        if not self.history:
            history_text.insert(tk.END, "üìå Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.")
        else:
            for idx, entry in enumerate(self.history, 1):
                status_emoji = "‚úÖ" if entry['valid_signature'] and not entry['errors'] else "‚ùå"
                error_summary = "\n      ‚Ä¢ ".join(entry['errors']) if entry['errors'] else "Kh√¥ng c√≥ l·ªói."

                transaction_summary = (
                    f"üìÑ Giao d·ªãch {idx}:\n\n"
                    f"   üë§ Ng∆∞·ªùi g·ª≠i: {entry['nguoi_gui']}\n\n"
                    f"   üë• Ng∆∞·ªùi nh·∫≠n: {entry['nguoi_nhan']}\n\n"
                    f"   üí∞ S·ªë ti·ªÅn: {entry['so_tien']}\n\n"
                    f"   üìå Tr·∫°ng th√°i: {status_emoji} {'H·ª£p l·ªá' if status_emoji == '‚úÖ' else 'Kh√¥ng h·ª£p l·ªá'}\n\n"
                    f"   ‚ö†Ô∏è L·ªói: {error_summary}\n\n"
                    f"{'‚îÄ'*70}\n\n"
                )
                history_text.insert(tk.END, transaction_summary)

        history_text.config(state='disabled')  # Kh√¥ng cho ph√©p ch·ªânh s·ª≠a

    def increase_score(self, points):
        self.score += points
        self.score_text.set(f"ƒêi·ªÉm: {self.score}")

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = EncryptionGameApp()
    app.mainloop()
